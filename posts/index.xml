<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on LeaveIt</title>
    <link>https://kcvo.top/posts/</link>
    <description>Recent content in Posts on LeaveIt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Thu, 13 Feb 2020 15:12:26 +0800</lastBuildDate>
    
	<atom:link href="https://kcvo.top/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS 里this的值到底是什么？</title>
      <link>https://kcvo.top/2020/js-%E9%87%8Cthis%E7%9A%84%E5%80%BC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 13 Feb 2020 15:12:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/js-%E9%87%8Cthis%E7%9A%84%E5%80%BC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>说到this，那就是面试的必考的题，如果你还没搞懂this，就请看看这篇文章吧。 面试中你可能会遇到这样的题目
let a = { speak: function() { console.log(this) } } let b = a.speak b() // 打印出的this 是 window a.speak() // 打印出的this 是 a 最后两行运行的结果怎么不一样了？ 看起来很迷对吧，看完下文，你还会这么想吗？ 函数调用 弄懂函数调用是学习this的关键
我们先来看看JS（ES5） 的三种函数调用形式
fn(p1, p2) obj.fn(p1, p2) fn.call(p0, p1, p2) 大多数的初学者都习惯使用前两种调用方式，然而这样并不利于我们了解this
实际上第三种调用方法才是正确的调用方式，也就是
fn.call(p0, p1, p2) 其他两种调用方式都是语法糖，并且可以等价的改为 call 形式
fn(p1, p2) // 等价于 fn.call(undefined, p1, p2) obj.fn(p1, p2) // 等价于 fn.call(obj, p1, p2) 为了方便下文描述，我们把这样的代码为 &#39; 转换代码 &#39; 这样，this 就很好解释了
使用fn.call(p0, p1, p2)方式调用，参数p0传入的值就是this。 先来看看 fn(p1, p2) 中的this如何确定</description>
    </item>
    
    <item>
      <title>Vue的语法糖 .sync修饰符</title>
      <link>https://kcvo.top/2020/vue%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96-.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Thu, 06 Feb 2020 15:12:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/vue%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96-.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>看完这个栗子就明白了： &amp;lt;template&amp;gt; &amp;lt;div style=&#39;border: 3px solid red;padding: 10px;&#39;&amp;gt; App.vue 我现在有 {{total}} &amp;lt;hr&amp;gt; &amp;lt;Child :money=&amp;quot;total&amp;quot; v-on:update:money = &amp;quot;total = $event&amp;quot; /&amp;gt; &amp;lt;!-- $event 保存了$emit 传入的参数money-100 --&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import Vue from &amp;quot;vue&amp;quot; Vue.component(&#39;Child&#39;, { template: `&amp;lt;div style=&#39;border: 3px solid green&#39;&amp;gt; {{money}} &amp;lt;button @click=&amp;quot;$emit(&#39;update:money&#39;, money-100)&amp;quot; &amp;gt; &amp;lt;span&amp;gt;花钱&amp;lt;/span&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt;`, props: [&amp;quot;money&amp;quot;] }) export default { data() { return { total: 10000 }; }, } &amp;lt;/script&amp;gt; 这个例子中，点击‘花钱’按钮时，子组件会通知父组件，‘我要花钱 money - 100’，父组件知道后修改total。完成花钱动作。这个一个完整的发布订阅模式。
使用.sync 语法糖 &amp;lt;Child :money.</description>
    </item>
    
    <item>
      <title>Vue的computed 与 watch 的区别</title>
      <link>https://kcvo.top/2020/vue%E7%9A%84computed-%E4%B8%8E-watch%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 06 Feb 2020 10:12:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/vue%E7%9A%84computed-%E4%B8%8E-watch%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>computer 计算属性 通过计算得出的属性就是计算属性 计算属性可以是一个函数或者是一个getter和setter组成的对象 看看一个展示名字的实例：
需求一：展示名字 // 引用完整版 Vue，方便讲解 import Vue from &amp;quot;vue/dist/vue.js&amp;quot;; new Vue({ data: { firstName: &#39;Jacky&#39;, lastName: &#39;Lee&#39; }, computed: { fullName() { return this.firstName + &#39; &#39; + this.lastName } }, template: ` &amp;lt;div&amp;gt; {{fullName}} &amp;lt;/div&amp;gt; `, methods: {} }).$mount(&amp;quot;#app&amp;quot;); fullName通过first.Name + lastName 计算得出，fullName使用时不需要加括号，可以直接作为属性使用，展示再页面中 需求二：可以改名字 // 引用完整版 Vue，方便讲解 import Vue from &amp;quot;vue/dist/vue.js&amp;quot;; new Vue({ data: { firstName: &#39;Jacky&#39;, lastName: &#39;Lee&#39; }, computed: { fullName: { get(){ return this.</description>
    </item>
    
    <item>
      <title>浅析Vue数据响应式</title>
      <link>https://kcvo.top/2020/%E6%B5%85%E6%9E%90vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</link>
      <pubDate>Wed, 05 Feb 2020 12:12:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/%E6%B5%85%E6%9E%90vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</guid>
      <description>Vue的数据存储在data里，当数据更新时，会触发视图的渲染。 首先先来看一下Vue到底对data做了什么。
//引用完整版 Vue import Vue from &amp;quot;vue/dist/vue.js&amp;quot;; Vue.config.productionTip = false; //禁用警告 const myData = { n: 0 } console.log(myData) // 精髓 let vm = new Vue({ data: myData, template: ` &amp;lt;div&amp;gt;{{n}}&amp;lt;/div&amp;gt; ` }).$mount(&amp;quot;#app&amp;quot;); setTimeout(()=&amp;gt;{ myData.n += 10 console.log(myData) // 精髓 },3000) 两次打印出的结果不同，说明vue对data里的数据进行了一些改造 ES6 的 getter 和 setter getter 和 setter 可以对虚拟属性进行性改写 请看下面的例子
需求一、得到姓名 let obj0 = { 姓: &amp;quot;迪&amp;quot;, 名: &amp;quot;丽热巴&amp;quot;, age: 18 } // 需求一，得到姓名 let obj1 = { 姓: &amp;quot;迪&amp;quot;, 名: &amp;quot;丽热巴&amp;quot;, 姓名() { return this.</description>
    </item>
    
    <item>
      <title>Vue完整版与Vue非完整版的区别</title>
      <link>https://kcvo.top/2020/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 02 Feb 2020 12:12:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88%E5%8C%BA%E5%88%AB/</guid>
      <description>Vue完整版   Vue完整版文件名为 vue.js 和 vue.min.js , 后者是压缩版，取消了注释和警告，适合在生产环境下使用。
  Vue非完整版   Vue非完整版文件名为 vue.runtime.js 和 vue.runtime.min.js， 后者是压缩版，取消了注释和警告，适合在生成环境下使用。
Vue完整版与Vue非完整版的区别 template 和 render 怎么用   template (完整版使用)   // 需要编译器 new Vue({ template: &#39;&amp;lt;div&amp;gt;{{ hi }}&amp;lt;/div&amp;gt;&#39; })   render (完整版与非完整使用)   // 不需要编译器 new Vue({ render (h) { return h(&#39;div&#39;, this.hi) } }) 完整代码和非完整版如何选择 个人建议：选择非完整版，然后配合vue-loader和vue文件。
why：  保证用户体验，用户下载的JS文件体积更小(小30%)，但只支持h函数。 保证开发体验，开发者可以直接在vue文件里写HTML标签，而不用写h函数。 累活让vue-loader来做，vue-loader把vue文件里的HTML转为h函数。  如何用 codesandbox.io 写 Vue 代码 codesandbox.</description>
    </item>
    
    <item>
      <title>浅析 MVC</title>
      <link>https://kcvo.top/2020/%E6%B5%85%E6%9E%90mvc/</link>
      <pubDate>Fri, 31 Jan 2020 12:12:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/%E6%B5%85%E6%9E%90mvc/</guid>
      <description>MVC是三个字母的缩写，分别是Model（模型）、View（视图）和Controller（控制） 这个模式认为，程序不论简单或复杂，从结构上看，都可以分成三类对象。
1.模型model用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法，会有一个或多个视图监听此模型。一旦模型的数据发生变化，模型将通知有关的视图。
// 伪代码示例 Model = { data: { 程序需要操作的数据或信息 }， create: { 增数据 }, delete: { 删数据 }, update(data) { Object.assign(m.data, data) //使用新数据替换旧数据 eventBus.trigger(&#39;m:upate&#39;) // eventBus触发&#39;m:update&#39;信息, 通知View刷新 }, get:{ 获取数据 } } 2.视图view是屏幕上的表示，描绘的是model的当前状态。当模型的数据发生变化，视图相应地得到刷新自己的机会
// 伪代码示例 View = { el: 需要刷新的元素, html: `&amp;lt;h1&amp;gt;M V C&amp;lt;/h1&amp;gt;....显示在页面上的内容` init(){ v.el: 需要刷新的元素 }, render(){ 刷新页面 } } 3.控制器controller定义用户界面对用户输入的响应方式，起到不同层面间的组织作用，用于控制应用程序的流程，它处理用户的行为和数据model上的改变。
// 伪代码示例 Controller = { init(){ v.init() // View初始化 v.render() // 第一次渲染 c.autoBindEvents() // 自动的事件绑定 eventBus.</description>
    </item>
    
    <item>
      <title>CORS跨域</title>
      <link>https://kcvo.top/2020/cors%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Sun, 26 Jan 2020 12:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/cors%E8%B7%A8%E5%9F%9F/</guid>
      <description>什么是跨域？ 简单的来说，出于安全方面的考虑，页面中的JavaScript无法访问其他服务器上的数据，即“同源策略”。而跨域就是通过某些手段来绕过同源策略限制，实现不同服务器之间通信的效果。
CORS CORS全称“跨域资源共享”(Cross-Origin-Resource-Share)
CORS需要浏览器和服务器同时支持，才可以实现跨域请求，目前几乎所有浏览器都支持CORS，IE则不能低于IE10。CORS的整个过程都由浏览器自动完成，前端无需做任何设置，跟平时发送ajax请求并无差异。所以，实现CORS的关键在于服务器，只要服务器实现CORS接口，就可以实现跨域通信。
请求类型：
CORS分为简单请求和非简单请求两种 符合以下条件，为简单请求：
请求方式使用下列方法之一： GET HEAD POST Content-Type 的值仅限于下列三者之一： text/plain multipart/form-data application/x-www-form-urlencoded 对于简单请求，浏览器会直接发送CORS请求，具体说来就是在header中加入origin请求头字段。同样，在响应头中，返回服务器设置的相关CORS头部字段，Access-Control-Allow-Origin字段为允许跨域请求的源。请求时浏览器在请求头的Origin中说明请求的源，服务器收到后发现允许该源跨域请求，则会成功返回，具体如下：
在这里，http://localhost:3001为我们当前发送请求的源，如果服务器发现请求在指定的源范围内，则会返回响应的请求结果， 否则会在控制台报错，如下图所示，在这里需要注意的是，尽管请求失败，但返回的状态码依然可能为200。所以在做处理时需要格外注意。
  非简单请求(预检请求)   使用了下面任一 HTTP 方法： PUT DELETE CONNECT OPTIONS TRACE PATCH Content-Type 的值不属于下列之一: application/x-www-form-urlencoded multipart/form-data text/plain 当发生符合非简单请求（预检请求）的条件时，浏览器会自动先发送一个options请求，如果发现服务器支持该请求，则会将真正的请求发送到后端，反之，如果浏览器发现服务端并不支持该请求，则会在控制台抛出错误，如下：
如果非简单请求（预检请求）发送成功，则会在头部多返回以下字段
Access-Control-Allow-Origin: http://localhost:3001 //该字段表明可供那个源跨域 Access-Control-Allow-Methods: GET, POST, PUT // 该字段表明服务端支持的请求方法 Access-Control-Allow-Headers: X-Custom-Header // 实际请求将携带的自定义请求首部字段 </description>
    </item>
    
    <item>
      <title>axios 基本用法</title>
      <link>https://kcvo.top/2020/axios%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 20 Jan 2020 12:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/axios%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>安装 使用 npm:
$ npm install axios
使用 bower:
$ bower install axios
使用 cdn:
&amp;lt;script src=&amp;quot;https://unpkg.com/axios/dist/axios.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
执行 GET 请求 // 为给定 ID 的 user 创建请求 axios.get(&#39;/user?ID=12345&#39;) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // 上面的请求也可以这样做 axios.get(&#39;/user&#39;, { params: { ID: 12345 } }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); 执行 POST 请求 axios.post(&#39;/user&#39;, { firstName: &#39;Fred&#39;, lastName: &#39;Flintstone&#39; }) .then(function (response) { console.</description>
    </item>
    
    <item>
      <title>jQuery设计思想及其简单实现</title>
      <link>https://kcvo.top/2020/jquery%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 19 Jan 2020 12:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/jquery%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>前言 jQuery 是目前最长寿也是使用最广泛的 javaScript 函数库,据统计全球排名前 100k 的网站,有 90%都在使用 jQuery,远远超过了其他的库,数据如下图 jQuery 的实现都是基于 DOM api 的,大家都知道 js 提供的 dom 操作代码繁琐,而 jQuery 的核心里历练 wirte less,do more. 当我们使用 jQuery 时,只需使用$($是 jQuery 的别名)就会声明一个全局函数,这个函数接受一个选择器,以获取对应的元素,之后便返回一个由 jQuery 构造出来对象,也称 jQuery 对象,此对象包含了可操作元素的方法. 一、jQuery 如何获取元素 jQuery 的基本设计思想和主要用法,就是&#39;选择某个网页元素,然后对其进行某种操作&amp;rsquo;
jQuery 使用$(selector) 的方法获取页面的操作元素,selector 接受字符串或着是元素组成的数组 我们可以使用 DOM API 的 querySelectorAll 进行类似的实现
window.$ = window.jQuery = function (selectorOrArray) { let elements if(typeof selectorOrArray === &#39;string&#39;){ elements = document.querySelectorAll(selectorOrArray) }else if(selectorOrArray instanceof Array){ elements = selectorOrArray } return {//返回一个可操作 elements 的对象} } 查找元素 当我们获取元素后,需要找到并操作其内部的元素时,可以调用 jQuery 对象里面的 find()函数 find()函数的实现,需要使用 for 循环来遍历,并将新生成的数组放入$(selector)</description>
    </item>
    
    <item>
      <title>为什么说DOM操作慢</title>
      <link>https://kcvo.top/2020/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4dom%E6%93%8D%E4%BD%9C%E6%85%A2/</link>
      <pubDate>Fri, 10 Jan 2020 12:20:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4dom%E6%93%8D%E4%BD%9C%E6%85%A2/</guid>
      <description>在学前端的过程中，经常会听说DOM操作慢，要尽量少去操作DOM，本文就浅析一下DOM操作慢的原因
我们知道：
 JS引擎不能操作页面，只能操作JS 渲染引擎不能操作JS，只能操作页面  那document.body.appendChild(&amp;lsquo;div1&amp;rsquo;)这句JS是如何改变页面的呢？ 我们先来完善一下这句JS语句的代码
let div1 = document.createElement(&#39;div1&#39;) div1.innerTEXT = &#39;h1&#39; document.body.append(div1) //...省略n行代码 div.innerTEXT = `I&#39;m Jacky` 这段代码的运行过程
  在 div1 放入页面之前:
对 div1 所有的操作都属于JS线程内的操作
  把 div1 放入页面中：
浏览器会发现JS的意图 就会通知渲染线程在页面中渲染 div1 对应的元素
  把 div1 放入页面之后
你对 div1 的操作都有可能触发重新渲染
  注： 有可能代表，可能触发也可能不触发
 用图表示
首先，DOM对象本身也是一个js对象，所以严格来说，并不是操作这个对象慢，而是说操作了这个对象后，需要经过跨流程通信和渲染线程触发的重新渲染，导致DOM操作慢。
div1.innerTEXT = I&#39;m Jacky 操作了什么？ 上图的最后一句语句，看似简单，但实际其全部含义是巨大的。可以粗略概述为：
 解析`I&#39;m Jacky`为HTML文本 向浏览器扩展程序寻求许可 销毁现有的子节点div1 创建子字节 根据父子关系重新计算Layout 重新Paint绘制  JS引擎和和渲染引擎的模块化设计，使得它们可以独立优化，运行速度更快，但是这种设计带来的后果就是DOM操作会越来越慢。</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://kcvo.top/2020/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sat, 04 Jan 2020 12:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>关于JS任务执行 众所周知，JS是一门单线程语言。那就像我们去银行办理业务，而单线程意味着只有一个办理窗口，那么每个人都要等前一个人办理完成后，再去办理。同理JS也是一样，JS任务要一个一个按顺序执行。那么问题来了，如果前一个任务执行时间过长，后一个任务也要等着，这样必然增加了网页的加载时间。因此聪明的程序员将任务分成两类
  同步任务
上一件事情没有完成，继续处理上一件事情，只有上一件事情完成了，才会做下一件事情 &amp;ndash;&amp;gt; JS中大部分都是同步编程
  异步任务
规划要做一件事情，但是不是当前立马去执行这件事情，需要等一定的时间，这样的话，我们不会等着他执行，而是继续执行下面的操作
  JS 函数的执行时机 函数执行的时机不同，运行结果也不同。下面我们按同步任务和异步任务两种情况，分别解释函数执行时机。
同步 举几个栗子 问：打印出多少?
let a = 1 function fn() {console.log(a)} 执行步骤：
 声明变量a并赋值为1 声明函数fn 结束  答：函数未执行，不打印结果
let a = 1 function fn(){console.log(a)} fn() 执行步骤：
 声明变量a并赋值为1 声明函数fn 执行fn() //打印出a 结束  答：a的结果为1
let a = 1 function fn(){console.log(a)} a = 2 fn() 执行步骤：
 声明变量a并赋值为1 声明函数fn 将2赋值给a 执行fn() //打印出a 结束  答：a的结果为2</description>
    </item>
    
    <item>
      <title>JS 的 new 到底是干什么的？</title>
      <link>https://kcvo.top/2020/js-%E7%9A%84-new-%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</link>
      <pubDate>Thu, 02 Jan 2020 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2020/js-%E7%9A%84-new-%E5%88%B0%E5%BA%95%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84/</guid>
      <description>大部分讲new的文章都会从面向对象的思路来讲，但是对于新手学习是，引入一个更复杂的概念，无疑是增加了学习了难度。
本文将从[省代码]的角度讲解new
举一个简单的栗子，有一条制造iPhoneX的流水线，生产出的iPhoneX在计算机里就是一堆属性，如下图：
写成代码如下
let iPhoneX = { ID: 1, 品牌: &#39;苹果&#39;, 颜色: &#39;土豪金&#39;, //有多种配色 屏幕: &#39;5.8英寸&#39;, 开机: function(){/* 开机代码 */}, 死机: function(){/* 死机代码 */} } 制作1000台iPhoneX let iPhoneXs = [] let iPhoneX for (let i = 0; i &amp;lt; 1000; i++) { iPhoneX = { ID: i, //ID号不能重复 品牌: &#39;苹果&#39;, 颜色: &#39;土豪金&#39;, //有多种配色 屏幕: &#39;5.8英寸&#39;, 开机: function(){/* 开机代码 */}, 死机: function(){/* 死机代码 */} } } OK弄好了，so easy
质疑 上面的代码存在一个问题：浪费了很多内存。</description>
    </item>
    
    <item>
      <title>JavaScript对象基本用法</title>
      <link>https://kcvo.top/2019/javascript%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 31 Dec 2019 15:15:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/javascript%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>对象是什么？ 对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。
什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。
声明对象的两种语法  let obj = { &amp;lsquo;name&amp;rsquo; : &amp;lsquo;Jacky&amp;rsquo;, &amp;lsquo;age&amp;rsquo; : 18 } let obj = new Object{ &amp;lsquo;name&amp;rsquo; : &amp;lsquo;Jacky&amp;rsquo;, &amp;lsquo;age&amp;rsquo; : 18 }  以上两种方法都可以声明对象，第二种写法更规范，第一种是简化写法。
细节：
 键名是字符串，可以包含任何字符 键名引号可以省略，但省略以后只能写标识符 就算引号省略了，键名还是会转成字符串保存  如何用变量做属性名 let a = &#39;name&#39; let obj = { [a] : &#39;Jacky&#39; } 使用中括号可以用变量做键名，如果是{ a : &amp;lsquo;jacky&amp;rsquo;},这样键名将会是&#39;a&amp;rsquo;。
如何删除对象的属性  delete.obj.xxx 或者 delete.obj[&amp;lsquo;xxx&amp;rsquo;]  delete命令删除对象的属性。删除成功后，就会返回true。
要注意如果删除一个不存在的属性，也会返回true，只有在删除不能删除的属性时才会返回false。
如何查看删除是否成功  &amp;lsquo;xxx&amp;rsquo; in obj === false  &amp;lsquo;xxx&#39;不是obj的属性</description>
    </item>
    
    <item>
      <title>JavaScript数据类型</title>
      <link>https://kcvo.top/2019/javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 30 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/javascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>JavaScript 数据类型   number 数字   string 字符串   symbol 符号   bool 布尔值   null 空   undefined 空   object 对象   口诀: 四基两空一对象
number JS的数字采用64位浮点数储存，又称双精度浮点数
 浮点就是可浮动的点，意思是小数点位置可以改动 例如 123.456 可以表示位 1.23456e10^2  64位浮点数的数据结构：
  符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数
  指数位E：中间的 11 位存储指数（exponent），用来表示次方数
  尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零
  特殊值:
  正零和负零要区分，正零和负零值都为零
  正无穷大和负无穷大要区分
  NaN (Not a Number) 也是数字类型，是一个未知数</description>
    </item>
    
    <item>
      <title>JavaScript基本语法</title>
      <link>https://kcvo.top/2019/javascript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 29 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/javascript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>什么是表达式和语句？ 语句 JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。
语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。
var a = 1 + 3
这条语句先用var命令，声明了变量a，然后将1 + 3的运算结果赋值给变量a。
表达式 1 + 3叫做表达式（expression），指一个为了得到返回值的计算式。
add(1,2)表达式的值为函数的返回值
console.log表达式的值为函数本身
console.log(3)表达式的值为函数的返回值，也就是undefined
两者的区别 语句和表达式的区别在于，语句是为了进行某种操作，一般情况下不需要返回值，而表达式都是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。
简单的判断方法  利用if语句判断  if(xxx){},如果没有报错就说明xxx是表达式，因为if括号里面需要的是布尔值，只要是有这个值就是表达式
 利用赋值变量来判断  因为表达式得到的是一个值，所以表达式可以赋值给一个变量，而如果是语句的话就会报错。
标识符的规则 标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以a和A是两个不同的标识符。
简单说，标识符命名规则如下。
 第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。注意不能使用数字 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字 0-9。 中文也是合法的标识符  if else 语句 语法  if(布尔值){语句1} else{语句2} {}在语句只有一句的时候可以省略，不建议这样做  举个栗子 if (m === 3) { console.log(&amp;quot;m等于3&amp;quot;) // 满足条件时，执行的语句 } else { console.log(&#39;m不等于3&#39;) // 不满足条件时，执行的语句 } 上面代码判断变量m是否等于3，如果等于就执行if代码块，否则执行else代码块。</description>
    </item>
    
    <item>
      <title>从Brendan Eich的自述看JavaScript的诞生</title>
      <link>https://kcvo.top/2019/%E4%BB%8Ebrendan-eich%E7%9A%84%E8%87%AA%E8%BF%B0%E7%9C%8Bjavascript%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Wed, 25 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/%E4%BB%8Ebrendan-eich%E7%9A%84%E8%87%AA%E8%BF%B0%E7%9C%8Bjavascript%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript的诞生 从历史的角度，说明Javascript到底是如何设计出来的。只有了解这段历史，才能明白Javascript为什么是现在的样子。我依据的资料，主要是Brendan Eich的自述。
1 1994年，网景公司（Netscape）发布了Navigator浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。&amp;hellip;&amp;hellip;网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。
网页脚本语言到底是什么语言？网景公司当时有两个选择：一个是采用现有的语言，比如Perl、Python、Tcl、Scheme等等，允许它们直接嵌入网页；另一个是发明一种全新的语言。
这两个选择各有利弊。第一个选择，有利于充分利用现有代码和程序员资源，推广起来比较容易；第二个选择，有利于开发出完全适用的语言，实现起来比较容易。到底采用哪一个选择，网景公司内部争执不下，管理层一时难以下定决心。
2 就在这时，发生了另外一件大事：1995年Sun公司将Oak语言改名为Java，正式向市场推出。
Sun公司大肆宣传，许诺这种语言可以&amp;quot;一次编写，到处运行&amp;rdquo;（Write Once, Run Anywhere），它看上去很可能成为未来的主宰。
网景公司动了心，决定与Sun公司结成联盟。它不仅允许Java程序以applet（小程序）的形式，直接在浏览器中运行；甚至还考虑直接将Java作为脚本语言嵌入网页，只是因为这样会使HTML网页过于复杂，后来才不得不放弃。
总之，当时的形势就是，网景公司的整个管理层，都是Java语言的信徒，Sun公司完全介入网页脚本语言的决策。因此，Javascript后来就是网景和Sun两家公司一起携手推向市场的，这种语言被命名为&amp;quot;Java+script&amp;quot;并不是偶然的。
3 此时，34岁的系统程序员Brendan Eich登场了。1995年4月，网景公司录用了他。
Brendan Eich的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将Scheme语言作为网页脚本语言的可能性。Brendan Eich本人也是这样想的，以为进入新公司后，会主要与Scheme语言打交道。
仅仅一个月之后，1995年5月，网景公司做出决策，未来的网页脚本语言必须&amp;quot;看上去与Java足够相似&amp;rdquo;，但是比Java简单，使得非专业的网页作者也能很快上手。这个决策实际上将Perl、Python、Tcl、Scheme等非面向对象编程的语言都排除在外了。
Brendan Eich被指定为这种&amp;quot;简化版Java语言&amp;quot;的设计师。
4 但是，他对Java一点兴趣也没有。为了应付公司安排的任务，他只用10天时间就把Javascript设计出来了。
由于设计时间太短，语言的一些细节考虑得不够严谨，导致后来很长一段时间，Javascript写出来的程序混乱不堪。如果Brendan Eich预见到，未来这种语言会成为互联网第一大语言，全世界有几百万学习者，他会不会多花一点时间呢？
总的来说，他的设计思路是这样的：
  借鉴C语言的基本语法；
  借鉴Java语言的数据类型和内存管理；
  借鉴Scheme语言，将函数提升到&amp;quot;第一等公民&amp;rdquo;（first class）的地位；
  借鉴Self语言，使用基于原型（prototype）的继承机制。
  所以，Javascript语言实际上是两种语言风格的混合产物&amp;mdash;-（简化的）函数式编程+（简化的）面向对象编程。这是由Brendan Eich（函数式编程）与网景公司（面向对象编程）共同决定的。
5 多年以后，Brendan Eich还是看不起Java。
他说：&amp;ldquo;Java（对Javascript）的影响，主要是把数据分成基本类型（primitive）和对象类型（object）两种，比如字符串和字符串对象，以及引入了Y2K问题。这真是不幸啊。&amp;rdquo;
把基本数据类型包装成对象，这样做是否可取，这里暂且不论。Y2K问题则是直接与Java有关。根据设想，Date.getYear()返回的应该是年份的最后两位：
var date1 = new Date(1999,0,1); var year1 = date1.getYear(); alert(year1); // 99 但是实际上，对于2000年，它返回的是100！
var date2 = new Date(2000,0,1); var year2 = date2.</description>
    </item>
    
    <item>
      <title>CSS动画优化</title>
      <link>https://kcvo.top/2019/css%E5%8A%A8%E7%94%BB%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 19 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/css%E5%8A%A8%E7%94%BB%E4%BC%98%E5%8C%96/</guid>
      <description>浏览器渲染原理 浏览器渲染经过以下步骤:
 根据HTML构建HTML树。(DOM) 根据CSS构建CSS树。(CSSOM) 将两棵树合并成一颗渲染树。(rander tree) Layout布局(文档流、盒模型、计算大小和位置)。 Paint绘制(把边框颜色、文字颜色、阴影等画出来)。 Compose合成(根据层叠关系展示画面).  如何优化CSS动画 答案是:减少浏览器的渲染次数 三种的更新方式: 可见三种更新方式中,第一种更新方法需要重新渲染3次(包括layout,paint,compose),第二种需重新渲染2次,而第三种只需要重新渲染1次.
不同的CSS属性有不同的更新方式,大家可以参考csstriggers.com(不需硬记),这个网站已经把所有属性都试过了.
Tips: 参考网站中的Blink为谷歌浏览器内核,Gecko为火狐浏览器内核,WebKit为Safari浏览器内核,EdgeHTML为IE浏览器内核
所以优化CSS动画性能的方法是尽量使用渲染次数少的CSS属性
 CSS优化:使用will-change或translate JS优化:使用requestAnimaitonFrame代替setTimeout或setlnterval  </description>
    </item>
    
    <item>
      <title>CSS动画制作的两种做法</title>
      <link>https://kcvo.top/2019/css%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%81%9A%E6%B3%95/</link>
      <pubDate>Wed, 18 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/css%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%81%9A%E6%B3%95/</guid>
      <description>我们来做一颗跳动的心吧 首先我们需要一颗心 百度搜索&amp;quot;心&amp;rdquo;&amp;hellip;&amp;hellip;这个也太可怕了吧,不适合儿童观众,我们还是自己用CSS画一个吧.
心怎么画?我们学的块级元素都是方形的,算加上border-radius也顶多只能画个 球
好吧!发挥我们的想象力,我们可以把它分解成两圆一方 代码如下:
用transform方法制作动画 我们需要做的动画让心放大-缩小-放大-缩小,以达到跳动的效果
在原有代码中增加tranform的transition(动画过渡)和scale(缩放),代码如下:
transform属性中
 transition: all 1s;动画播放时间1s transform: scale(1.5);元素放大1.5倍  动画效果:
用animation方法制作动画 在原有代码中增加animation和@keyframes heart(窗口名称),代码如下:
animation属性中:
 animation:.5s heart infinite alternate-reverse;动画播放时间0.5s,目标窗口名称heart,infinite为无限播放,alternate-reverse为反向开始循环播放  @keyframes heart { 0%{transform: scale(1);} 100%{transform: scale(1.5);} }   在0%时刻缩放比为1,在100%时刻缩放比1.5
动画效果:
用animation方法制作多个时间点动画 多个时间点动画表示,在多个时刻进行不同的变化;
在上一步的代码中修改@keyframes heart,代码如下:
@keyframes heart { 0%{ transform: scale(1); } 50%{ transform: scale(.5); } 100%{ transform: scale(1.5); } } 在0%时刻缩放比为1,在50%时刻缩放比0.5,在100%时刻缩放比1.5
动画效果:
总结:  transform和animation都可以用于制作CSS动画,animation在制作多个时间点动画会更加方便. transform和animation还有很多用法,请在MDN中进行学习. 虽CSS属性虽然简单,但是要用好靠的是想象力  </description>
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>https://kcvo.top/2019/%E6%B5%85%E6%9E%90-url/</link>
      <pubDate>Sun, 15 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/%E6%B5%85%E6%9E%90-url/</guid>
      <description>URL组成 URL，统一资源定位符，用于定位互联网上资源，俗称网址。
URL的组成: URL=协议+域名或IP+端口号+路径+查询字符串+锚点 URL的写法: scheme://host.domain:port/path/filename 举个栗子 https://www.zhihu.com/explore 在上面的网站中
 scheme - 定义因特网服务的类型。常见的协议有 http、https、ftp、file，其中最常见的类型是http，而 https 则是进行加密的网络传输。例子中使用的是https host - 定义域主机（http 的默认主机是 www） domain - 定义因特网域名，例子中就是zhihu.com port - 定义主机上的端口号（http的默认端口号是 80,https 默认是 443，FTP 默 21 端口）, 例子中https的默认端口是443(已被省略) path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）,例子中的路径就是/explore filename - 定义文档/资源的名称  IP IP的全称为Internet Protocol(互联网协议),是设备的数字便签,用于互联网定位.常见的IP可分为IPv4。常见的IP地址可分为IPv4和IPv6两类,其中使用最广泛的是IPv4。
IP可以分为内网IP和外网IP
 外网IP由通讯公司提供,如国内的电信、移动等。外网用于外网之间的通信和定位 内网IP由路由器分配,用于区分内网连接设备  域名 域名实际上是IP地址的代称,目的是为了方便记忆。例如39.156.69.79这个百度的IP地址,在浏览器输入就可以访问百度,但我相信没人会这样做,因为这样实在太难记了。但baidu.com就十分方便好记,www.baidu.com通过DNS就会返回39.156.69.79这个IP,浏览器就可以访问了。
域名可以分为:
 顶级域名,例如&amp;rdquo;.com&amp;rdquo;、&amp;quot;.net&amp;rdquo;、&amp;quot;.org&amp;rdquo;、&amp;quot;.edu&amp;rdquo;、&amp;quot;.info&amp;rdquo; 二级域名,例如&amp;quot;xiedaima.com&amp;rdquo; 父域名 子域名  一图流总结:
推荐一个可以查询自己域名的网站:IP138.com
DNS DNS，全称 Domain Name System(service)，是一个域名系统。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。
在bash,输入ping命令即可查询到域名对应的IP地址。
例如:</description>
    </item>
    
    <item>
      <title>负margin的理解</title>
      <link>https://kcvo.top/2019/%E8%B4%9Fmargin%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 15 Dec 2019 15:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/%E8%B4%9Fmargin%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>margin的概述 margin属性为给定元素设置所有四个（上下左右）方向的外边距属性。这是四个外边距属性设置的简写。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。
先上栗子 此次测试的方法是,通过设定margin-left的值从正值变为负值,来观察其对div大小和移动方向的改变
测试代码:
HTML代码 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;负margin测试&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;test&amp;quot;&amp;gt;test-test-test&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; CSS代码 *{ margin: 0; padding: 0; box-sizing: border-box; } .container{ margin: 50px; border: 1px solid blue; } .test{ margin: 20px; margin-left: 0px; border: 1px solid green; } 测试代码很简单,由简单入手，正所谓删繁就简三秋树，领异标新二月花
第一步 设定margin-left: 0; 如图所示,margin-left赋值为0px,覆盖了它的初始值10px。图中蓝色是container的border,绿色是content的border,可以看出content此时宽度为554px
第二步 设定margin-left: 30px; 如图所示,可以看出content此时宽度为524px,对比上一步减少了30px,左边缘向右移动
第三步 设定margin-left: 50px; 如图所示,可以看出content此时宽度为504px,对比上一步减少了20px,左边缘向右移动
此时不难看出,margin-left值增大时,test被向右挤压,宽度逐渐缩小
第四步 设定margin-left: 20px; 如图所示,可以看出content此时宽度为534px,对比上一步增加了30px,左边缘向右移动</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://kcvo.top/2019/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Thu, 12 Dec 2019 16:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>a 标签的用法   a 的href取值     网址     https &amp;lt;a href=&amp;quot;https//google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;
  http &amp;lt;a href=&amp;quot;http//google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;
  // &amp;lt;a href=&amp;quot;//google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;
以上三种形式均可
    路径 相对路径和绝对路径都可以.
  伪协议     javascript,可以引入JS代码
&amp;lt;a href=&amp;quot;javascript:alert(1);&amp;quot;&amp;gt;javascript&amp;lt;/a&amp;gt;
  mailto,点击后跳转到发邮件页面
&amp;lt;a href=&amp;quot;mailto:943514589@qq.com&amp;quot;&amp;gt;send mail to&amp;lt;/a&amp;gt;
以下是mailto的详细用法
  tel,手机点击后跳转到呼叫页面
&amp;lt;a href=&amp;quot;tel:13311113322&amp;quot;&amp;gt;phone call&amp;lt;/a&amp;gt;
   id id,可以跳转到页面内id所标记的元素位置
&amp;lt;a href=&amp;quot;#xxx&amp;quot;&amp;gt;查看ID为xxx的项目&amp;lt;/a&amp;gt;
    target的取值     内置命名     取值为_blank,a标签的链接在新窗口打开</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://kcvo.top/2019/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Wed, 11 Dec 2019 16:23:26 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>Ⅰ.HTML 是谁发明的？ HTML 诞生于蒂姆·伯纳斯-李爵士的一篇文章HTML Tags
Ⅱ.什么是HTML？ HTML 是网页使用的语言，定义了网页的结构和内容。浏览器访问网站，其实就是从服务器下载 HTML 代码，然后渲染出网页。HTML 的全名是“超文本标记语言”（HyperText Markup Language）
Ⅲ.HTML 起手应该写什么 HTML起手应该包含以下代码：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 提示：html文件用VScode打开后，输入!之后按tab键，上述代码将会自动生成，方便快捷。
Ⅳ.网页的基本标签有哪些   &amp;lt;!doctype&amp;gt;   网页的第一个标签通常是&amp;lt;!doctype&amp;gt;，表示文档类型，告诉浏览器如何解析网页。
  &amp;lt;html&amp;gt;   &amp;lt;html&amp;gt;标签是网页的顶层容器，也称为根元素（root element），其他元素都是它的子元素。一个网页只能有一个&amp;lt;html&amp;gt;标签。
  &amp;lt;head&amp;gt;   &amp;lt;head&amp;gt;标签是一个容器标签，用于放置网页的元信息。它的内容不会出现在网页上，而是为网页渲染做准备。
  &amp;lt;meta&amp;gt;   &amp;lt;meta&amp;gt;标签用于设置或说明网页的元数据，必须放在&amp;lt;head&amp;gt;里面。一个&amp;lt;meta&amp;gt;标签就是一项元数据，网页可以有多个&amp;lt;meta&amp;gt;。
 &amp;lt;title&amp;gt;  &amp;lt;title&amp;gt;标签用于指定网页的标题，会显示在浏览器窗口的标题栏。
  &amp;lt;body&amp;gt;   &amp;lt;body&amp;gt;标签是一个容器标签，用于放置网页的主体内容。浏览器显示的页面内容，都是放置在它的内部。它是&amp;lt;html&amp;gt;的第二个子元素，紧跟在&amp;lt;head&amp;gt;后面。</description>
    </item>
    
    <item>
      <title>如何使用Hugo搭建个人博客</title>
      <link>https://kcvo.top/2019/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 10 Dec 2019 15:24:33 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hugo是什么？ Hugo是一个用Go语言编写的静态网站生成器，Hugo一般只需要几秒钟就能生成一个网站（每页少于1毫秒），被称为”世界上最快的网站构建框架“，是最热门的静态网站生成器之一，被广泛采用。
如何使用Hugo搭建个人博客 Step1：安装Hugo   下载Hugo安装包   下载到安装包，解压后把hugo.exe.放到x:\xxx\hugo
  添加环境变量：点击计算机图标-右键-属性-高级系统设置-系统变量-path  4.重启终端，运行hugo version。安装成功就能查看到版本号 Step2: 创建一个新的Hugo网页  进入Hugo官网，点击Quick Start。 Step1操作前面已完成，直接操作Step2 复制Step2的代码，在cmder上运行。注意这里要把”quickstart“改成“github用户名.github.io-creater!”(这样操作的好处是，上传到GitHub上后方便标识。)   Step3: 下载一个主题  依次复制Step3的代码在cmder上运行  由于主题是国外资源，国内下载很慢，建议挂VPN下载  Step4: 新建一篇文章  复制Step4的代码在cmder上运行  打开新建的markdown文件 将draft: true 改为false(draft为草稿意思，改为false后文章才会显示在blog上)   Step5: 开启Hugo服务器  复制Step5的代码在cmder上运行  运行后不要关闭服务器(关闭后本地访问会失败) 在浏览器中访问http://localhost:1313/或者127.0.0.1:1313 此时将会看到你新建的blog  Step6 自定义主题  打开hugo网站根目录的config.toml 可自定义一下代码，包括：语言、博客名   Step7 简历静态网站  复制Step7的代码在cmder上运行  运行后将会得到一个public的目录 在hugo的更目录中创建名为“.gitignore”的文件 编辑“.gitignore”,写入/public/(由于hugo根目录和public需要分别上传到GitHub，此操作可以防止子仓库的问题出现) 在GitHub上新建一个仓库，命名为github用户名.github.io 把public目录上传到新建的仓库中 在你的git仓库里面Settings的GitHub Pages下你可以看到http://你的用户名.</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>https://kcvo.top/2019/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Mon, 09 Dec 2019 15:29:33 +0800</pubDate>
      
      <guid>https://kcvo.top/2019/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了，希望我能写出好文章给大家看</description>
    </item>
    
  </channel>
</rss>